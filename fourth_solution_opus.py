"""
Modelo Hurdle de Elasticidade - Financiamento de Ve√≠culos
Modelo de dois est√°gios: Probabilidade de Convers√£o + Valor da Produ√ß√£o
Com vari√°veis categ√≥ricas parametriz√°veis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from datetime import datetime
from typing import List, Dict, Tuple, Optional

# Bibliotecas para modelagem
import statsmodels.formula.api as smf
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    mean_absolute_error, mean_squared_error, r2_score, 
    mean_absolute_percentage_error, roc_auc_score, 
    classification_report, confusion_matrix
)
from sklearn.preprocessing import StandardScaler
from scipy import stats
from scipy.special import expit  # fun√ß√£o log√≠stica

warnings.filterwarnings('ignore')

# Configura√ß√£o de visualiza√ß√£o
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")

# ==========================================
# CONFIGURA√á√ÉO DAS VARI√ÅVEIS DISPON√çVEIS
# ==========================================

# Lista de todas as vari√°veis categ√≥ricas dispon√≠veis no dataset
AVAILABLE_CATEGORICAL_VARS = [
    'uf',                    # Unidade Federativa
    'rating_price',          # Rating de pre√ßo
    'seg_cliente',           # Segmento de cliente
    'tipo_veiculo',          # Tipo de ve√≠culo (se dispon√≠vel)
    'canal_venda',           # Canal de venda (se dispon√≠vel)
    'regiao',               # Regi√£o geogr√°fica (se dispon√≠vel)
    'faixa_financiamento',   # Faixa de valor financiado (se dispon√≠vel)
]

# Configura√ß√µes padr√£o
DEFAULT_CAT_VARS = ['uf', 'rating_price', 'seg_cliente']
DEFAULT_PROD_VAR = 'valor_prod'
DEFAULT_TAXA_VAR = 'pct_txa_ofrt_simu_pmro_vers'
DEFAULT_CONVERSION_VAR = 'flag_conversao'  # Vari√°vel bin√°ria de convers√£o

# ==========================================
# 1. VALIDA√á√ÉO E PREPARA√á√ÉO DAS VARI√ÅVEIS
# ==========================================

def validate_categorical_vars(df: pd.DataFrame, 
                            requested_vars: List[str], 
                            min_categories: int = 2,
                            max_categories: int = 50) -> List[str]:
    """
    Valida e filtra as vari√°veis categ√≥ricas solicitadas
    """
    print("\n" + "="*60)
    print("üîç VALIDA√á√ÉO DAS VARI√ÅVEIS CATEG√ìRICAS")
    print("="*60)
    
    validated_vars = []
    
    for var in requested_vars:
        if var not in df.columns:
            print(f"‚ö†Ô∏è  Vari√°vel '{var}' n√£o encontrada no dataset")
            continue
        
        n_unique = df[var].nunique()
        
        if n_unique < min_categories:
            print(f"‚ö†Ô∏è  Vari√°vel '{var}' tem apenas {n_unique} categoria(s) - ignorada")
            continue
        
        if n_unique > max_categories:
            print(f"‚ö†Ô∏è  Vari√°vel '{var}' tem {n_unique} categorias - muito alta cardinalidade")
            print(f"    Considerando apenas as top {max_categories} categorias")
        
        null_pct = df[var].isnull().sum() / len(df) * 100
        if null_pct > 50:
            print(f"‚ö†Ô∏è  Vari√°vel '{var}' tem {null_pct:.1f}% de valores nulos - ignorada")
            continue
        
        validated_vars.append(var)
        print(f"‚úÖ Vari√°vel '{var}' validada: {n_unique} categorias, {null_pct:.1f}% nulos")
    
    if not validated_vars:
        print("‚ö†Ô∏è  Nenhuma vari√°vel categ√≥rica v√°lida encontrada!")
        print("    Usando vari√°veis padr√£o dispon√≠veis...")
        for var in DEFAULT_CAT_VARS:
            if var in df.columns and df[var].nunique() >= min_categories:
                validated_vars.append(var)
                print(f"‚úÖ Vari√°vel padr√£o '{var}' adicionada")
    
    print(f"\nüìä Vari√°veis categ√≥ricas finais: {validated_vars}")
    return validated_vars

# ==========================================
# 2. CARREGAMENTO E PREPARA√á√ÉO DOS DADOS
# ==========================================

def load_and_prepare_data(anomes_list: List[int]) -> pd.DataFrame:
    """
    Carrega e prepara os dados para modelagem Hurdle
    """
    anomes_str = ','.join([str(x) for x in anomes_list])
    query = f'''
        SELECT *
        FROM tb_funil_veiculos
        WHERE anomes IN ({anomes_str})
    '''
    
    print(f"üìä Carregando dados dos per√≠odos: {anomes_str}")
    df = wr.athena.read_sql(query)
    
    # Convers√£o de tipos
    df['pct_txa_ofrt_simu_pmro_vers'] = df['pct_txa_ofrt_simu_pmro_vers'].astype(float)
    df['valor_prod'] = df['valor_prod'].astype(float)
    
    # CRIAR VARI√ÅVEL DE CONVERS√ÉO (bin√°ria)
    # Assumindo que valor_prod > 0 indica convers√£o
    df['flag_conversao'] = (df['valor_prod'] > 0).astype(int)
    
    # Criar features adicionais
    df['log_valor_prod'] = np.log1p(df['valor_prod'])
    df['taxa_squared'] = df['pct_txa_ofrt_simu_pmro_vers'] ** 2
    
    print(f"‚úÖ Dados carregados: {df.shape[0]:,} registros")
    print(f"üìÖ Per√≠odos dispon√≠veis: {df['anomes'].unique()}")
    print(f"üìä Taxa de convers√£o geral: {df['flag_conversao'].mean():.2%}")
    print(f"üí∞ Ticket m√©dio (convers√µes): R$ {df[df['flag_conversao']==1]['valor_prod'].mean():,.2f}")
    
    return df

# ==========================================
# 3. AN√ÅLISE EXPLORAT√ìRIA - MODELO HURDLE
# ==========================================

def perform_hurdle_eda(df: pd.DataFrame, 
                       prod_var: str, 
                       taxa_var: str, 
                       conversion_var: str,
                       cat_vars: List[str]) -> None:
    """
    An√°lise explorat√≥ria adaptada para modelo Hurdle
    """
    print("\n" + "="*60)
    print("üìà AN√ÅLISE EXPLORAT√ìRIA - MODELO HURDLE")
    print("="*60)
    
    # Estat√≠sticas gerais
    print("\nüìä ESTAT√çSTICAS GERAIS:")
    print(f"   Total de observa√ß√µes: {len(df):,}")
    print(f"   Taxa de convers√£o: {df[conversion_var].mean():.2%}")
    print(f"   N√∫mero de convers√µes: {df[conversion_var].sum():,}")
    
    # Estat√≠sticas por convers√£o
    converters = df[df[conversion_var] == 1]
    non_converters = df[df[conversion_var] == 0]
    
    print("\nüìä COMPARA√á√ÉO: Conversores vs N√£o-Conversores")
    print(f"   Taxa m√©dia - Conversores: {converters[taxa_var].mean():.2f}%")
    print(f"   Taxa m√©dia - N√£o-Conversores: {non_converters[taxa_var].mean():.2f}%")
    print(f"   Diferen√ßa: {non_converters[taxa_var].mean() - converters[taxa_var].mean():.2f}pp")
    
    # Visualiza√ß√µes
    fig = plt.figure(figsize=(20, 12))
    
    # 1. Taxa de convers√£o por faixa de taxa
    ax1 = plt.subplot(3, 3, 1)
    df['taxa_bins'] = pd.qcut(df[taxa_var], q=10, duplicates='drop')
    conv_by_taxa = df.groupby('taxa_bins')[conversion_var].mean()
    conv_by_taxa.plot(kind='bar', ax=ax1, color='steelblue')
    ax1.set_xlabel('Faixa de Taxa')
    ax1.set_ylabel('Taxa de Convers√£o')
    ax1.set_title('Taxa de Convers√£o por Faixa de Taxa de Juros')
    ax1.tick_params(axis='x', rotation=45)
    
    # 2. Distribui√ß√£o da taxa por status de convers√£o
    ax2 = plt.subplot(3, 3, 2)
    converters[taxa_var].hist(bins=30, alpha=0.6, label='Conversores', ax=ax2, color='green')
    non_converters[taxa_var].hist(bins=30, alpha=0.6, label='N√£o-Conversores', ax=ax2, color='red')
    ax2.set_xlabel('Taxa (%)')
    ax2.set_ylabel('Frequ√™ncia')
    ax2.set_title('Distribui√ß√£o da Taxa por Status de Convers√£o')
    ax2.legend()
    
    # 3. Produ√ß√£o dos conversores por taxa
    ax3 = plt.subplot(3, 3, 3)
    if len(converters) > 0:
        ax3.scatter(converters[taxa_var], converters[prod_var], alpha=0.5, s=10)
        z = np.polyfit(converters[taxa_var], converters[prod_var], 1)
        p = np.poly1d(z)
        ax3.plot(converters[taxa_var].sort_values(), 
                p(converters[taxa_var].sort_values()), 
                "r--", alpha=0.8, label='Tend√™ncia')
        ax3.set_xlabel('Taxa (%)')
        ax3.set_ylabel('Valor Produzido (R$)')
        ax3.set_title('Produ√ß√£o vs Taxa (Apenas Conversores)')
        ax3.legend()
    
    # 4. Taxa de convers√£o por vari√°vel categ√≥rica (primeira)
    if cat_vars:
        ax4 = plt.subplot(3, 3, 4)
        var = cat_vars[0]
        conv_by_cat = df.groupby(var)[conversion_var].mean().sort_values(ascending=False).head(10)
        conv_by_cat.plot(kind='bar', ax=ax4, color='teal')
        ax4.set_xlabel(var)
        ax4.set_ylabel('Taxa de Convers√£o')
        ax4.set_title(f'Taxa de Convers√£o por {var} (Top 10)')
        ax4.tick_params(axis='x', rotation=45)
    
    # 5. Ticket m√©dio por faixa de taxa (conversores)
    ax5 = plt.subplot(3, 3, 5)
    if len(converters) > 0:
        converters['taxa_bins'] = pd.qcut(converters[taxa_var], q=10, duplicates='drop')
        ticket_by_taxa = converters.groupby('taxa_bins')[prod_var].mean()
        ticket_by_taxa.plot(kind='bar', ax=ax5, color='orange')
        ax5.set_xlabel('Faixa de Taxa')
        ax5.set_ylabel('Ticket M√©dio (R$)')
        ax5.set_title('Ticket M√©dio por Faixa de Taxa (Conversores)')
        ax5.tick_params(axis='x', rotation=45)
    
    # 6. Curva de convers√£o suavizada
    ax6 = plt.subplot(3, 3, 6)
    taxa_sorted = df[taxa_var].sort_values()
    window_size = max(100, len(df) // 50)
    
    conv_rates = []
    taxa_points = []
    
    for i in range(0, len(taxa_sorted) - window_size, window_size // 2):
        window_data = df[(df[taxa_var] >= taxa_sorted.iloc[i]) & 
                        (df[taxa_var] <= taxa_sorted.iloc[i + window_size])]
        if len(window_data) > 0:
            conv_rates.append(window_data[conversion_var].mean())
            taxa_points.append(window_data[taxa_var].mean())
    
    if taxa_points:
        ax6.plot(taxa_points, conv_rates, 'b-', linewidth=2)
        ax6.set_xlabel('Taxa (%)')
        ax6.set_ylabel('Taxa de Convers√£o')
        ax6.set_title('Curva de Convers√£o (Suavizada)')
        ax6.grid(True, alpha=0.3)
    
    # 7. An√°lise bivariada - convers√£o e produ√ß√£o
    if len(cat_vars) > 1:
        ax7 = plt.subplot(3, 3, 7)
        var = cat_vars[1]
        analysis_df = df.groupby(var).agg({
            conversion_var: 'mean',
            prod_var: lambda x: x[x > 0].mean() if (x > 0).any() else 0
        }).reset_index()
        
        ax7_twin = ax7.twinx()
        ax7.bar(range(len(analysis_df)), analysis_df[conversion_var], 
                alpha=0.6, label='Taxa Convers√£o', color='blue')
        ax7_twin.bar(range(len(analysis_df)), analysis_df[prod_var], 
                    alpha=0.6, label='Ticket M√©dio', color='orange')
        
        ax7.set_xlabel(var)
        ax7.set_ylabel('Taxa de Convers√£o', color='blue')
        ax7_twin.set_ylabel('Ticket M√©dio (R$)', color='orange')
        ax7.set_title(f'Convers√£o e Ticket por {var}')
        ax7.set_xticks(range(len(analysis_df)))
        ax7.set_xticklabels(analysis_df[var], rotation=45)
    
    # 8. Matriz de correla√ß√£o
    ax8 = plt.subplot(3, 3, 8)
    numeric_cols = [taxa_var, conversion_var, prod_var, 'taxa_squared']
    correlation_matrix = df[numeric_cols].corr()
    sns.heatmap(correlation_matrix, annot=True, fmt='.3f', 
                cmap='coolwarm', center=0, ax=ax8)
    ax8.set_title('Correla√ß√µes - Modelo Hurdle')
    
    # 9. An√°lise de elasticidade emp√≠rica
    ax9 = plt.subplot(3, 3, 9)
    elasticity_df = pd.DataFrame()
    
    percentiles = [10, 20, 30, 40, 50, 60, 70, 80, 90]
    for p in percentiles:
        taxa_threshold = df[taxa_var].quantile(p/100)
        subset = df[df[taxa_var] <= taxa_threshold]
        if len(subset) > 100:
            conv_rate = subset[conversion_var].mean()
            avg_prod = subset[subset[conversion_var] == 1][prod_var].mean() if (subset[conversion_var] == 1).any() else 0
            elasticity_df = pd.concat([elasticity_df, pd.DataFrame({
                'percentil': [p],
                'taxa_limite': [taxa_threshold],
                'conv_rate': [conv_rate],
                'ticket_medio': [avg_prod],
                'receita_esperada': [conv_rate * avg_prod]
            })], ignore_index=True)
    
    if not elasticity_df.empty:
        ax9_twin = ax9.twinx()
        ax9.plot(elasticity_df['taxa_limite'], elasticity_df['conv_rate'], 
                'b-', label='Taxa Convers√£o', marker='o')
        ax9_twin.plot(elasticity_df['taxa_limite'], elasticity_df['receita_esperada'], 
                     'g-', label='Receita Esperada', marker='s')
        ax9.set_xlabel('Taxa Limite (%)')
        ax9.set_ylabel('Taxa de Convers√£o', color='blue')
        ax9_twin.set_ylabel('Receita Esperada (R$)', color='green')
        ax9.set_title('An√°lise de Elasticidade Emp√≠rica')
        ax9.legend(loc='upper left')
        ax9_twin.legend(loc='upper right')
    
    plt.tight_layout()
    plt.show()

# ==========================================
# 4. PREPARA√á√ÉO DE DADOS PARA MODELO HURDLE
# ==========================================

def prepare_hurdle_data(df: pd.DataFrame,
                        prod_var: str,
                        taxa_var: str,
                        conversion_var: str,
                        cat_vars: List[str],
                        train_periods: List[int],
                        test_periods: List[int]) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """
    Prepara dados para modelo Hurdle de dois est√°gios
    """
    print("\n" + "="*60)
    print("üîß PREPARA√á√ÉO DOS DADOS - MODELO HURDLE")
    print("="*60)
    
    # Separar treino e teste
    train_data = df[df['anomes'].isin(train_periods)].copy()
    test_data = df[df['anomes'].isin(test_periods)].copy()
    
    print(f"\nüìä DADOS DE TREINO:")
    print(f"   Total: {len(train_data):,} registros")
    print(f"   Convers√µes: {train_data[conversion_var].sum():,} ({train_data[conversion_var].mean():.2%})")
    print(f"   Ticket m√©dio: R$ {train_data[train_data[conversion_var]==1][prod_var].mean():,.2f}")
    
    print(f"\nüìä DADOS DE TESTE:")
    print(f"   Total: {len(test_data):,} registros")
    print(f"   Convers√µes: {test_data[conversion_var].sum():,} ({test_data[conversion_var].mean():.2%})")
    print(f"   Ticket m√©dio: R$ {test_data[test_data[conversion_var]==1][prod_var].mean():,.2f}")
    
    # Converter vari√°veis categ√≥ricas
    for var in cat_vars:
        if var in train_data.columns:
            train_data[var] = train_data[var].astype('category')
        if var in test_data.columns:
            test_data[var] = test_data[var].astype('category')
    
    return train_data, test_data

# ==========================================
# 5. MODELO HURDLE - EST√ÅGIO 1: CONVERS√ÉO
# ==========================================

def build_conversion_model(train_data: pd.DataFrame,
                         test_data: pd.DataFrame,
                         conversion_var: str,
                         taxa_var: str,
                         cat_vars: List[str],
                         include_interactions: bool = True) -> Tuple:
    """
    Est√°gio 1: Modelo Log√≠stico para Probabilidade de Convers√£o
    """
    print("\n" + "="*60)
    print("üéØ EST√ÅGIO 1: MODELO DE CONVERS√ÉO (LOG√çSTICO)")
    print("="*60)
    
    # Construir f√≥rmula
    formula_parts = [conversion_var, '~', taxa_var, '+ I(', taxa_var, '**2)']
    
    if cat_vars:
        for var in cat_vars:
            formula_parts.append(f' + C({var})')
            if include_interactions:
                formula_parts.append(f' + {taxa_var}:C({var})')
    
    formula = ''.join(formula_parts)
    
    print(f"\nüìù F√≥rmula do modelo de convers√£o: {formula}")
    
    try:
        # Ajustar modelo log√≠stico
        conversion_model = smf.logit(formula=formula, data=train_data).fit(disp=0)
        
        print("\nüìà SUM√ÅRIO DO MODELO DE CONVERS√ÉO:")
        print(conversion_model.summary())
        
        # Previs√µes
        train_data['prob_conversao'] = conversion_model.predict(train_data)
        test_data['prob_conversao'] = conversion_model.predict(test_data)
        
        # Previs√µes bin√°rias (threshold = 0.5)
        train_data['pred_conversao'] = (train_data['prob_conversao'] > 0.5).astype(int)
        test_data['pred_conversao'] = (test_data['prob_conversao'] > 0.5).astype(int)
        
        # M√©tricas
        print("\nüìä M√âTRICAS DO MODELO DE CONVERS√ÉO:")
        
        for name, data in [('Treino', train_data), ('Teste', test_data)]:
            auc = roc_auc_score(data[conversion_var], data['prob_conversao'])
            accuracy = (data[conversion_var] == data['pred_conversao']).mean()
            
            print(f"\n   {name}:")
            print(f"      AUC-ROC: {auc:.4f}")
            print(f"      Acur√°cia: {accuracy:.4f}")
            
            # Matriz de confus√£o
            cm = confusion_matrix(data[conversion_var], data['pred_conversao'])
            precision = cm[1,1] / (cm[0,1] + cm[1,1]) if (cm[0,1] + cm[1,1]) > 0 else 0
            recall = cm[1,1] / (cm[1,0] + cm[1,1]) if (cm[1,0] + cm[1,1]) > 0 else 0
            
            print(f"      Precis√£o: {precision:.4f}")
            print(f"      Recall: {recall:.4f}")
        
        return conversion_model, train_data, test_data
        
    except Exception as e:
        print(f"‚ùå Erro no modelo de convers√£o: {e}")
        print("   Tentando modelo simplificado...")
        
        simple_formula = f'{conversion_var} ~ {taxa_var} + I({taxa_var}**2)'
        conversion_model = smf.logit(formula=simple_formula, data=train_data).fit(disp=0)
        
        train_data['prob_conversao'] = conversion_model.predict(train_data)
        test_data['prob_conversao'] = conversion_model.predict(test_data)
        
        return conversion_model, train_data, test_data

# ==========================================
# 6. MODELO HURDLE - EST√ÅGIO 2: PRODU√á√ÉO
# ==========================================

def build_production_model(train_data: pd.DataFrame,
                         test_data: pd.DataFrame,
                         prod_var: str,
                         taxa_var: str,
                         cat_vars: List[str],
                         conversion_var: str,
                         include_interactions: bool = True) -> Tuple:
    """
    Est√°gio 2: Modelo Linear para Valor da Produ√ß√£o (dado que converteu)
    """
    print("\n" + "="*60)
    print("üí∞ EST√ÅGIO 2: MODELO DE PRODU√á√ÉO (LINEAR)")
    print("="*60)
    
    # Filtrar apenas conversores
    train_converters = train_data[train_data[conversion_var] == 1].copy()
    test_converters = test_data[test_data[conversion_var] == 1].copy()
    
    print(f"\nüìä Dados para modelo de produ√ß√£o:")
    print(f"   Treino: {len(train_converters):,} conversores")
    print(f"   Teste: {len(test_converters):,} conversores")
    
    if len(train_converters) < 30:
        print("‚ö†Ô∏è  Poucos conversores para treinar modelo robusto!")
    
    # Usar log da produ√ß√£o para melhor ajuste
    train_converters['log_prod'] = np.log1p(train_converters[prod_var])
    test_converters['log_prod'] = np.log1p(test_converters[prod_var])
    
    # Construir f√≥rmula
    formula_parts = ['log_prod', '~', taxa_var, '+ I(', taxa_var, '**2)']
    
    if cat_vars:
        for var in cat_vars:
            formula_parts.append(f' + C({var})')
            if include_interactions:
                formula_parts.append(f' + {taxa_var}:C({var})')
    
    formula = ''.join(formula_parts)
    
    print(f"\nüìù F√≥rmula do modelo de produ√ß√£o: {formula}")
    
    try:
        # Ajustar modelo linear
        production_model = smf.ols(formula=formula, data=train_converters).fit()
        
        print("\nüìà SUM√ÅRIO DO MODELO DE PRODU√á√ÉO:")
        print(production_model.summary())
        
        # Previs√µes em log
        train_converters['pred_log_prod'] = production_model.predict(train_converters)
        test_converters['pred_log_prod'] = production_model.predict(test_converters)
        
        # Converter de volta para escala original
        train_converters['pred_prod'] = np.expm1(train_converters['pred_log_prod'])
        test_converters['pred_prod'] = np.expm1(test_converters['pred_log_prod'])
        
        # Aplicar previs√µes de volta ao dataset completo
        train_data['pred_prod_if_convert'] = 0.0
        test_data['pred_prod_if_convert'] = 0.0
        
        train_data.loc[train_data[conversion_var] == 1, 'pred_prod_if_convert'] = train_converters['pred_prod'].values
        test_data.loc[test_data[conversion_var] == 1, 'pred_prod_if_convert'] = test_converters['pred_prod'].values
        
        # Para n√£o-conversores, usar previs√£o do modelo
        non_conv_train = train_data[train_data[conversion_var] == 0].copy()
        non_conv_test = test_data[test_data[conversion_var] == 0].copy()
        
        if len(non_conv_train) > 0:
            non_conv_train['log_prod'] = production_model.predict(non_conv_train)
            train_data.loc[train_data[conversion_var] == 0, 'pred_prod_if_convert'] = np.expm1(non_conv_train['log_prod'].values)
        
        if len(non_conv_test) > 0:
            non_conv_test['log_prod'] = production_model.predict(non_conv_test)
            test_data.loc[test_data[conversion_var] == 0, 'pred_prod_if_convert'] = np.expm1(non_conv_test['log_prod'].values)
        
        # M√©tricas
        print("\nüìä M√âTRICAS DO MODELO DE PRODU√á√ÉO (apenas conversores):")
        
        for name, data in [('Treino', train_converters), ('Teste', test_converters)]:
            if len(data) > 0:
                mae = mean_absolute_error(data[prod_var], data['pred_prod'])
                rmse = np.sqrt(mean_squared_error(data[prod_var], data['pred_prod']))
                r2 = r2_score(data[prod_var], data['pred_prod'])
                
                print(f"\n   {name}:")
                print(f"      MAE:  R$ {mae:,.2f}")
                print(f"      RMSE: R$ {rmse:,.2f}")
                print(f"      R¬≤:   {r2:.4f}")
        
        return production_model, train_data, test_data
        
    except Exception as e:
        print(f"‚ùå Erro no modelo de produ√ß√£o: {e}")
        return None, train_data, test_data

# ==========================================
# 7. C√ÅLCULO DE ELASTICIDADES - MODELO HURDLE
# ==========================================

def calculate_hurdle_elasticities(conversion_model,
                                 production_model,
                                 data: pd.DataFrame,
                                 taxa_var: str,
                                 cat_vars: List[str]) -> Dict:
    """
    Calcula elasticidades para o modelo Hurdle completo
    """
    print("\n" + "="*60)
    print("üíπ ELASTICIDADES - MODELO HURDLE")
    print("="*60)
    
    elasticities = {
        'conversao': {},
        'producao': {},
        'total': {}
    }
    
    taxa_media = data[taxa_var].mean()
    
    # ===== ELASTICIDADE DE CONVERS√ÉO =====
    print("\nüìä ELASTICIDADE DE CONVERS√ÉO:")
    
    # Coeficiente base da taxa no modelo de convers√£o
    beta_taxa_conv = conversion_model.params.get(taxa_var, 0)
    beta_taxa2_conv = conversion_model.params.get(f'I({taxa_var} ** 2)', 0)
    
    # Elasticidade na m√©dia
    prob_media = expit(conversion_model.predict(data).mean())
    elasticity_conv_base = beta_taxa_conv * (1 - prob_media)
    
    print(f"   Base: {elasticity_conv_base:.4f}")
    print(f"   Interpreta√ß√£o: +1pp na taxa ‚Üí {elasticity_conv_base*100:.2f}pp na prob. convers√£o")
    
    # ===== ELASTICIDADE DE PRODU√á√ÉO =====
    if production_model:
        print("\nüí∞ ELASTICIDADE DE PRODU√á√ÉO (conversores):")
        
        # Como usamos log, o coeficiente j√° √© semi-elasticidade
        beta_taxa_prod = production_model.params.get(taxa_var, 0)
        
        print(f"   Base: {beta_taxa_prod:.4f}")
        print(f"   Interpreta√ß√£o: +1pp na taxa ‚Üí {beta_taxa_prod*100:.2f}% no valor financiado")
    
    # ===== ELASTICIDADE TOTAL =====
    print("\nüéØ ELASTICIDADE TOTAL (Convers√£o √ó Produ√ß√£o):")
    
    # Elasticidade total = elasticidade convers√£o + elasticidade produ√ß√£o
    if production_model:
        elasticity_total = elasticity_conv_base + beta_taxa_prod
        print(f"   Total: {elasticity_total:.4f}")
        print(f"   Interpreta√ß√£o: +1pp na taxa ‚Üí {elasticity_total*100:.2f}% na receita esperada")
    
    # Calcular por segmento
    if cat_vars:
        for var in cat_vars:
            elasticities['conversao'][var] = {}
            elasticities['producao'][var] = {}
            elasticities['total'][var] = {}
            
            categories = data[var].unique()
            
            print(f"\nüìà Elasticidades por {var}:")
            
            for cat in categories:
                # Elasticidade de convers√£o por segmento
                interaction_conv = f'{taxa_var}:C({var})[T.{cat}]'
                if interaction_conv in conversion_model.params:
                    elast_conv_seg = elasticity_conv_base + conversion_model.params[interaction_conv] * (1 - prob_media)
                else:
                    elast_conv_seg = elasticity_conv_base
                
                elasticities['conversao'][var][cat] = elast_conv_seg
                
                # Elasticidade de produ√ß√£o por segmento
                if production_model:
                    interaction_prod = f'{taxa_var}:C({var})[T.{cat}]'
                    if interaction_prod in production_model.params:
                        elast_prod_seg = beta_taxa_prod + production_model.params[interaction_prod]
                    else:
                        elast_prod_seg = beta_taxa_prod
                    
                    elasticities['producao'][var][cat] = elast_prod_seg
                    elasticities['total'][var][cat] = elast_conv_seg + elast_prod_seg
                    
                    print(f"   {cat}:")
                    print(f"      Convers√£o: {elast_conv_seg:.4f}")
                    print(f"      Produ√ß√£o:  {elast_prod_seg:.4f}")
                    print(f"      Total:     {elasticities['total'][var][cat]:.4f}")
    
    return elasticities

# ==========================================
# 8. MODELO HURDLE COMPLETO
# ==========================================

def build_hurdle_model(train_data: pd.DataFrame,
                      test_data: pd.DataFrame,
                      prod_var: str,
                      taxa_var: str,
                      conversion_var: str,
                      cat_vars: List[str],
                      include_interactions: bool = True) -> Dict:
    """
    Constr√≥i o modelo Hurdle completo (dois est√°gios)
    """
    print("\n" + "="*60)
    print("üöÄ CONSTRUINDO MODELO HURDLE COMPLETO")
    print("="*60)
    
    # EST√ÅGIO 1: Modelo de Convers√£o
    conversion_model, train_data, test_data = build_conversion_model(
        train_data, test_data, conversion_var, taxa_var, 
        cat_vars, include_interactions
    )
    
    # EST√ÅGIO 2: Modelo de Produ√ß√£o
    production_model, train_data, test_data = build_production_model(
        train_data, test_data, prod_var, taxa_var, 
        cat_vars, conversion_var, include_interactions
    )
    
    # PREVIS√ÉO FINAL: Probabilidade √ó Valor Esperado
    train_data['pred_receita_esperada'] = train_data['prob_conversao'] * train_data['pred_prod_if_convert']
    test_data['pred_receita_esperada'] = test_data['prob_conversao'] * test_data['pred_prod_if_convert']
    
    # Receita real para compara√ß√£o
    train_data['receita_real'] = train_data[prod_var]
    test_data['receita_real'] = test_data[prod_var]
    
    print("\n" + "="*60)
    print("üìä M√âTRICAS DO MODELO HURDLE COMPLETO")
    print("="*60)
    
    for name, data in [('Treino', train_data), ('Teste', test_data)]:
        # M√©tricas de receita esperada
        mae = mean_absolute_error(data['receita_real'], data['pred_receita_esperada'])
        rmse = np.sqrt(mean_squared_error(data['receita_real'], data['pred_receita_esperada']))
        
        # R¬≤ apenas para valores positivos
        mask = data['receita_real'] > 0
        if mask.sum() > 0:
            r2 = r2_score(data[mask]['receita_real'], data[mask]['pred_receita_esperada'])
        else:
            r2 = np.nan
        
        print(f"\n   {name} - Receita Esperada:")
        print(f"      MAE:  R$ {mae:,.2f}")
        print(f"      RMSE: R$ {rmse:,.2f}")
        if not np.isnan(r2):
            print(f"      R¬≤ (conversores): {r2:.4f}")
        
        # Compara√ß√£o de totais
        total_real = data['receita_real'].sum()
        total_pred = data['pred_receita_esperada'].sum()
        erro_total = (total_pred - total_real) / total_real * 100
        
        print(f"\n      Total Real: R$ {total_real:,.2f}")
        print(f"      Total Predito: R$ {total_pred:,.2f}")
        print(f"      Erro Total: {erro_total:.2f}%")
    
    return {
        'conversion_model': conversion_model,
        'production_model': production_model,
        'train_data': train_data,
        'test_data': test_data
    }

# ==========================================
# 9. DIAGN√ìSTICOS DO MODELO HURDLE
# ==========================================

def hurdle_model_diagnostics(hurdle_results: Dict) -> None:
    """
    Diagn√≥sticos visuais para o modelo Hurdle
    """
    print("\n" + "="*60)
    print("üîç DIAGN√ìSTICOS VISUAIS - MODELO HURDLE")
    print("="*60)
    
    train_data = hurdle_results['train_data']
    test_data = hurdle_results['test_data']
    
    fig, axes = plt.subplots(3, 3, figsize=(18, 15))
    
    # 1. ROC Curve - Convers√£o
    from sklearn.metrics import roc_curve
    
    ax = axes[0, 0]
    for name, data, color in [('Treino', train_data, 'blue'), ('Teste', test_data, 'red')]:
        fpr, tpr, _ = roc_curve(data['flag_conversao'], data['prob_conversao'])
        auc = roc_auc_score(data['flag_conversao'], data['prob_conversao'])
        ax.plot(fpr, tpr, color=color, label=f'{name} (AUC={auc:.3f})')
    
    ax.plot([0, 1], [0, 1], 'k--', alpha=0.5)
    ax.set_xlabel('Taxa de Falso Positivo')
    ax.set_ylabel('Taxa de Verdadeiro Positivo')
    ax.set_title('Curva ROC - Modelo de Convers√£o')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 2. Calibra√ß√£o - Probabilidade de Convers√£o
    ax = axes[0, 1]
    n_bins = 10
    for name, data, color in [('Treino', train_data, 'blue'), ('Teste', test_data, 'red')]:
        prob_bins = pd.qcut(data['prob_conversao'], q=n_bins, duplicates='drop')
        calibration = data.groupby(prob_bins).agg({
            'prob_conversao': 'mean',
            'flag_conversao': 'mean'
        })
        ax.scatter(calibration['prob_conversao'], calibration['flag_conversao'], 
                  color=color, label=name, s=50)
    
    ax.plot([0, 1], [0, 1], 'k--', alpha=0.5)
    ax.set_xlabel('Probabilidade M√©dia Predita')
    ax.set_ylabel('Propor√ß√£o Real de Convers√µes')
    ax.set_title('Calibra√ß√£o do Modelo de Convers√£o')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 3. Predito vs Real - Produ√ß√£o (conversores)
    ax = axes[0, 2]
    converters_train = train_data[train_data['flag_conversao'] == 1]
    converters_test = test_data[test_data['flag_conversao'] == 1]
    
    if len(converters_train) > 0:
        ax.scatter(converters_train['valor_prod'], converters_train['pred_prod_if_convert'], 
                  alpha=0.5, s=10, label='Treino')
    if len(converters_test) > 0:
        ax.scatter(converters_test['valor_prod'], converters_test['pred_prod_if_convert'], 
                  alpha=0.5, s=10, color='orange', label='Teste')
    
    if len(converters_train) > 0 or len(converters_test) > 0:
        all_vals = pd.concat([
            converters_train[['valor_prod', 'pred_prod_if_convert']] if len(converters_train) > 0 else pd.DataFrame(),
            converters_test[['valor_prod', 'pred_prod_if_convert']] if len(converters_test) > 0 else pd.DataFrame()
        ])
        if len(all_vals) > 0:
            max_val = max(all_vals.max().max(), 1)
            ax.plot([0, max_val], [0, max_val], 'r--', alpha=0.5)
    
    ax.set_xlabel('Produ√ß√£o Real (R$)')
    ax.set_ylabel('Produ√ß√£o Predita (R$)')
    ax.set_title('Modelo de Produ√ß√£o - Conversores')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 4. Distribui√ß√£o de Probabilidades
    ax = axes[1, 0]
    ax.hist(train_data['prob_conversao'], bins=30, alpha=0.6, label='Treino', density=True)
    ax.hist(test_data['prob_conversao'], bins=30, alpha=0.6, label='Teste', density=True)
    ax.set_xlabel('Probabilidade de Convers√£o')
    ax.set_ylabel('Densidade')
    ax.set_title('Distribui√ß√£o das Probabilidades Preditas')
    ax.legend()
    
    # 5. Res√≠duos - Modelo de Produ√ß√£o
    ax = axes[1, 1]
    if len(converters_train) > 0:
        residuals_train = converters_train['valor_prod'] - converters_train['pred_prod_if_convert']
        ax.scatter(converters_train['pred_prod_if_convert'], residuals_train, 
                  alpha=0.5, s=10, label='Treino')
    if len(converters_test) > 0:
        residuals_test = converters_test['valor_prod'] - converters_test['pred_prod_if_convert']
        ax.scatter(converters_test['pred_prod_if_convert'], residuals_test, 
                  alpha=0.5, s=10, color='orange', label='Teste')
    
    ax.axhline(y=0, color='r', linestyle='--', alpha=0.5)
    ax.set_xlabel('Produ√ß√£o Predita (R$)')
    ax.set_ylabel('Res√≠duos (R$)')
    ax.set_title('Res√≠duos - Modelo de Produ√ß√£o')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 6. Receita Esperada vs Real
    ax = axes[1, 2]
    ax.scatter(train_data['receita_real'], train_data['pred_receita_esperada'], 
              alpha=0.3, s=5, label='Treino')
    ax.scatter(test_data['receita_real'], test_data['pred_receita_esperada'], 
              alpha=0.3, s=5, color='orange', label='Teste')
    
    max_val = max(
        train_data[['receita_real', 'pred_receita_esperada']].max().max(),
        test_data[['receita_real', 'pred_receita_esperada']].max().max()
    )
    ax.plot([0, max_val], [0, max_val], 'r--', alpha=0.5)
    ax.set_xlabel('Receita Real (R$)')
    ax.set_ylabel('Receita Esperada Predita (R$)')
    ax.set_title('Modelo Hurdle Completo')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 7. An√°lise por Taxa - Convers√£o
    ax = axes[2, 0]
    taxa_bins = pd.qcut(train_data['pct_txa_ofrt_simu_pmro_vers'], q=10, duplicates='drop')
    conv_analysis = train_data.groupby(taxa_bins).agg({
        'flag_conversao': 'mean',
        'prob_conversao': 'mean'
    })
    
    x_pos = range(len(conv_analysis))
    width = 0.35
    ax.bar([p - width/2 for p in x_pos], conv_analysis['flag_conversao'], 
           width, label='Real', alpha=0.7)
    ax.bar([p + width/2 for p in x_pos], conv_analysis['prob_conversao'], 
           width, label='Predito', alpha=0.7)
    ax.set_xlabel('Faixa de Taxa')
    ax.set_ylabel('Taxa de Convers√£o')
    ax.set_title('Convers√£o por Faixa de Taxa')
    ax.set_xticks(x_pos)
    ax.set_xticklabels([f'{x.left:.1f}-{x.right:.1f}' for x in conv_analysis.index], 
                       rotation=45, ha='right')
    ax.legend()
    
    # 8. An√°lise por Taxa - Produ√ß√£o
    ax = axes[2, 1]
    prod_analysis = converters_train.groupby(
        pd.qcut(converters_train['pct_txa_ofrt_simu_pmro_vers'], q=5, duplicates='drop')
    ).agg({
        'valor_prod': 'mean',
        'pred_prod_if_convert': 'mean'
    })
    
    if len(prod_analysis) > 0:
        x_pos = range(len(prod_analysis))
        ax.bar([p - width/2 for p in x_pos], prod_analysis['valor_prod'], 
               width, label='Real', alpha=0.7)
        ax.bar([p + width/2 for p in x_pos], prod_analysis['pred_prod_if_convert'], 
               width, label='Predito', alpha=0.7)
        ax.set_xlabel('Faixa de Taxa')
        ax.set_ylabel('Ticket M√©dio (R$)')
        ax.set_title('Ticket M√©dio por Faixa de Taxa')
        ax.set_xticks(x_pos)
        ax.set_xticklabels([f'{x.left:.1f}-{x.right:.1f}' for x in prod_analysis.index], 
                           rotation=45, ha='right')
        ax.legend()
    
    # 9. Feature Importance (simplificado)
    ax = axes[2, 2]
    if hurdle_results['conversion_model']:
        importance_conv = pd.Series(
            np.abs(hurdle_results['conversion_model'].params),
            index=hurdle_results['conversion_model'].params.index
        ).sort_values(ascending=False).head(10)
        
        ax.barh(range(len(importance_conv)), importance_conv.values)
        ax.set_yticks(range(len(importance_conv)))
        ax.set_yticklabels(importance_conv.index)
        ax.set_xlabel('|Coeficiente|')
        ax.set_title('Top 10 Features - Modelo Convers√£o')
        ax.invert_yaxis()
    
    plt.tight_layout()
    plt.show()

# ==========================================
# 10. SIMULA√á√ÉO DE CEN√ÅRIOS - MODELO HURDLE
# ==========================================

def simulate_hurdle_scenarios(hurdle_results: Dict,
                             taxa_var: str,
                             cat_vars: List[str]) -> pd.DataFrame:
    """
    Simula cen√°rios de precifica√ß√£o com modelo Hurdle
    """
    print("\n" + "="*60)
    print("üéØ SIMULA√á√ÉO DE CEN√ÅRIOS - MODELO HURDLE")
    print("="*60)
    
    base_data = hurdle_results['train_data'].copy()
    conversion_model = hurdle_results['conversion_model']
    production_model = hurdle_results['production_model']
    
    # Taxa base
    taxa_base = base_data[taxa_var].mean()
    
    # Cen√°rios
    scenarios = {
        'Redu√ß√£o Agressiva': -2.0,
        'Redu√ß√£o Moderada': -1.0,
        'Redu√ß√£o Leve': -0.5,
        'Baseline': 0.0,
        'Aumento Leve': 0.5,
        'Aumento Moderado': 1.0,
        'Aumento Agressivo': 2.0
    }
    
    results = []
    
    for scenario_name, taxa_change in scenarios.items():
        # Aplicar mudan√ßa na taxa
        scenario_data = base_data.copy()
        scenario_data[taxa_var] = scenario_data[taxa_var] + taxa_change
        
        # Prever convers√£o
        scenario_data['prob_conversao_scenario'] = conversion_model.predict(scenario_data)
        
        # Prever produ√ß√£o
        if production_model:
            scenario_data['log_prod'] = production_model.predict(scenario_data)
            scenario_data['pred_prod_scenario'] = np.expm1(scenario_data['log_prod'])
        else:
            scenario_data['pred_prod_scenario'] = scenario_data['pred_prod_if_convert']
        
        # Receita esperada
        scenario_data['receita_esperada_scenario'] = (
            scenario_data['prob_conversao_scenario'] * 
            scenario_data['pred_prod_scenario']
        )
        
        # M√©tricas agregadas
        conversao_base = base_data['prob_conversao'].mean()
        conversao_scenario = scenario_data['prob_conversao_scenario'].mean()
        
        ticket_base = base_data['pred_prod_if_convert'].mean()
        ticket_scenario = scenario_data['pred_prod_scenario'].mean()
        
        receita_base = base_data['pred_receita_esperada'].sum()
        receita_scenario = scenario_data['receita_esperada_scenario'].sum()
        
        results.append({
            'Cen√°rio': scenario_name,
            'Œî Taxa (pp)': taxa_change,
            'Taxa M√©dia': taxa_base + taxa_change,
            'Convers√£o Base (%)': conversao_base * 100,
            'Convers√£o Cen√°rio (%)': conversao_scenario * 100,
            'Œî Convers√£o (pp)': (conversao_scenario - conversao_base) * 100,
            'Ticket Base (R$)': ticket_base,
            'Ticket Cen√°rio (R$)': ticket_scenario,
            'Œî Ticket (%)': (ticket_scenario - ticket_base) / ticket_base * 100,
            'Receita Base (R$)': receita_base,
            'Receita Cen√°rio (R$)': receita_scenario,
            'Œî Receita (%)': (receita_scenario - receita_base) / receita_base * 100
        })
    
    scenarios_df = pd.DataFrame(results)
    
    print("\nüìä Resultados das Simula√ß√µes:")
    print(scenarios_df[['Cen√°rio', 'Œî Taxa (pp)', 'Œî Convers√£o (pp)', 
                        'Œî Ticket (%)', 'Œî Receita (%)']].to_string(index=False))
    
    # Visualiza√ß√£o
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    
    # 1. Impacto na Convers√£o
    ax = axes[0, 0]
    colors = ['red' if x < 0 else 'green' if x > 0 else 'gray' 
              for x in scenarios_df['Œî Convers√£o (pp)']]
    ax.barh(scenarios_df['Cen√°rio'], scenarios_df['Œî Convers√£o (pp)'], color=colors)
    ax.axvline(x=0, color='black', linestyle='-', linewidth=0.5)
    ax.set_xlabel('Varia√ß√£o na Taxa de Convers√£o (pp)')
    ax.set_title('Impacto na Convers√£o')
    
    # 2. Impacto no Ticket M√©dio
    ax = axes[0, 1]
    colors = ['red' if x < 0 else 'green' if x > 0 else 'gray' 
              for x in scenarios_df['Œî Ticket (%)']]
    ax.barh(scenarios_df['Cen√°rio'], scenarios_df['Œî Ticket (%)'], color=colors)
    ax.axvline(x=0, color='black', linestyle='-', linewidth=0.5)
    ax.set_xlabel('Varia√ß√£o no Ticket M√©dio (%)')
    ax.set_title('Impacto no Ticket')
    
    # 3. Impacto na Receita Total
    ax = axes[1, 0]
    colors = ['red' if x < 0 else 'green' if x > 0 else 'gray' 
              for x in scenarios_df['Œî Receita (%)']]
    ax.barh(scenarios_df['Cen√°rio'], scenarios_df['Œî Receita (%)'], color=colors)
    ax.axvline(x=0, color='black', linestyle='-', linewidth=0.5)
    ax.set_xlabel('Varia√ß√£o na Receita Total (%)')
    ax.set_title('Impacto na Receita')
    
    for i, valor in enumerate(scenarios_df['Œî Receita (%)']):
        ax.text(valor, i, f'{valor:.1f}%', va='center', 
               ha='left' if valor >= 0 else 'right')
    
    # 4. Decomposi√ß√£o do Impacto
    ax = axes[1, 1]
    x = range(len(scenarios_df))
    width = 0.35
    
    ax.bar([i - width/2 for i in x], scenarios_df['Œî Convers√£o (pp)'], 
           width, label='Œî Convers√£o', alpha=0.7)
    ax.bar([i + width/2 for i in x], scenarios_df['Œî Ticket (%)'], 
           width, label='Œî Ticket', alpha=0.7)
    
    ax.set_xlabel('Cen√°rio')
    ax.set_ylabel('Varia√ß√£o (%/pp)')
    ax.set_title('Decomposi√ß√£o: Convers√£o vs Ticket')
    ax.set_xticks(x)
    ax.set_xticklabels(scenarios_df['Cen√°rio'], rotation=45, ha='right')
    ax.legend()
    ax.axhline(y=0, color='black', linestyle='-', linewidth=0.5)
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return scenarios_df

# ==========================================
# 11. FUN√á√ÉO PRINCIPAL - MODELO HURDLE
# ==========================================

def run_hurdle_elasticity_analysis(anomes_treino: List[int],
                                  anomes_teste: List[int],
                                  categorical_vars: Optional[List[str]] = None,
                                  prod_var: Optional[str] = None,
                                  taxa_var: Optional[str] = None,
                                  conversion_var: Optional[str] = None,
                                  include_interactions: bool = True,
                                  validate_vars: bool = True) -> Dict:
    """
    Executa an√°lise completa com Modelo Hurdle
    
    Parameters:
    -----------
    anomes_treino : List[int]
        Per√≠odos de treino
    anomes_teste : List[int]
        Per√≠odos de teste
    categorical_vars : List[str], optional
        Vari√°veis categ√≥ricas
    prod_var : str, optional
        Vari√°vel de produ√ß√£o
    taxa_var : str, optional
        Vari√°vel de taxa
    conversion_var : str, optional
        Vari√°vel de convers√£o (ser√° criada se n√£o existir)
    include_interactions : bool
        Se inclui intera√ß√µes nos modelos
    validate_vars : bool
        Se valida vari√°veis categ√≥ricas
    
    Returns:
    --------
    Dict: Resultados completos da an√°lise
    """
    
    print("="*60)
    print("üöÄ MODELO HURDLE - FINANCIAMENTO DE VE√çCULOS")
    print("="*60)
    print(f"üìÖ Per√≠odos de Treino: {anomes_treino}")
    print(f"üìÖ Per√≠odos de Teste: {anomes_teste}")
    
    # Usar vari√°veis padr√£o se n√£o especificadas
    if prod_var is None:
        prod_var = DEFAULT_PROD_VAR
    if taxa_var is None:
        taxa_var = DEFAULT_TAXA_VAR
    if conversion_var is None:
        conversion_var = DEFAULT_CONVERSION_VAR
    if categorical_vars is None:
        categorical_vars = DEFAULT_CAT_VARS
    
    print(f"\nüìä Configura√ß√£o:")
    print(f"   - Vari√°vel de produ√ß√£o: {prod_var}")
    print(f"   - Vari√°vel de taxa: {taxa_var}")
    print(f"   - Vari√°vel de convers√£o: {conversion_var}")
    print(f"   - Vari√°veis categ√≥ricas: {categorical_vars}")
    
    # 1. Carregar dados
    all_periods = anomes_treino + anomes_teste
    df = load_and_prepare_data(all_periods)
    
    # 2. Validar vari√°veis categ√≥ricas
    if validate_vars:
        cat_vars = validate_categorical_vars(df, categorical_vars)
    else:
        cat_vars = categorical_vars
    
    # 3. An√°lise explorat√≥ria
    perform_hurdle_eda(df, prod_var, taxa_var, conversion_var, cat_vars)
    
    # 4. Preparar dados
    train_data, test_data = prepare_hurdle_data(
        df, prod_var, taxa_var, conversion_var, cat_vars,
        anomes_treino, anomes_teste
    )
    
    # 5. Construir modelo Hurdle
    hurdle_results = build_hurdle_model(
        train_data, test_data, prod_var, taxa_var,
        conversion_var, cat_vars, include_interactions
    )
    
    # 6. Calcular elasticidades
    elasticities = calculate_hurdle_elasticities(
        hurdle_results['conversion_model'],
        hurdle_results['production_model'],
        train_data, taxa_var, cat_vars
    )
    
    # 7. Diagn√≥sticos
    hurdle_model_diagnostics(hurdle_results)
    
    # 8. Simular cen√°rios
    scenarios_df = simulate_hurdle_scenarios(hurdle_results, taxa_var, cat_vars)
    
    print("\n" + "="*60)
    print("‚úÖ AN√ÅLISE HURDLE CONCLU√çDA COM SUCESSO!")
    print("="*60)
    
    return {
        'hurdle_model': hurdle_results,
        'elasticities': elasticities,
        'scenarios': scenarios_df,
        'categorical_vars_used': cat_vars,
        'train_data': hurdle_results['train_data'],
        'test_data': hurdle_results['test_data']
    }

# ==========================================
# EXEMPLOS DE USO
# ==========================================

if __name__ == "__main__":
    # Definir per√≠odos
    ANOMES_TREINO = [202501, 202502, 202503]
    ANOMES_TESTE = [202504]
    
    # ====== EXEMPLO 1: Configura√ß√£o Padr√£o ======
    print("\nüîπ EXEMPLO 1: Modelo Hurdle Padr√£o")
    results = run_hurdle_elasticity_analysis(
        anomes_treino=ANOMES_TREINO,
        anomes_teste=ANOMES_TESTE
    )
    
    # ====== EXEMPLO 2: Customizar Vari√°veis ======
    print("\nüîπ EXEMPLO 2: Vari√°veis Customizadas")
    results = run_hurdle_elasticity_analysis(
        anomes_treino=ANOMES_TREINO,
        anomes_teste=ANOMES_TESTE,
        categorical_vars=['uf', 'seg_cliente'],
        include_interactions=True
    )
    
    # ====== EXEMPLO 3: Modelo Simplificado ======
    print("\nüîπ EXEMPLO 3: Modelo Sem Intera√ß√µes")
    results = run_hurdle_elasticity_analysis(
        anomes_treino=ANOMES_TREINO,
        anomes_teste=ANOMES_TESTE,
        categorical_vars=['rating_price'],
        include_interactions=False
    )
    
    # Acessar resultados:
    # results['hurdle_model'] - modelos de convers√£o e produ√ß√£o
    # results['elasticities'] - elasticidades calculadas
    # results['scenarios'] - cen√°rios simulados
    # results['train_data'] - dados de treino com previs√µes
    # results['test_data'] - dados de teste com previs√µes